title:
  Evaluate some code in your head No. 1.

author:
  Bogdan Bugarschi

text: |
  Evaluate the code below and select the correct anwers from dropdowns.

    01  byte value1 = 127;
    02  value1++;
    03  System.out.println(value1);
    04  System.out.println(1.0 / 3.0);
    05  System.out.println(1.0f / 3.0f);

  What is the output of line 03? *:byteOverFlow*
  What is the output of line 04? *:doubleDivision:*
  What is the output of line 05? *:floatDivision:*


choices:
  byteOverFlow:
    dropdown: ["127","128", "-128", "Compile Error"]
  doubleDivision:
    dropdown: ["0.3333333333333333", "0.(3)", "0.3"]
  floatDivision:
    dropdown: ["0.33333334", "0.3f", "0.333f"]

answers:
  byteOverFlow: "-128"
  doubleDivision: "0.3333333333333333"
  floatDivision: "0.33333334"

explanation: |
  for question 1 bytes have a range of possible values between [-128, 127]
  adding 1 to 127 (in bytes) will cause it wrap around to -128
  
  for question 2 and 3 the default number type in (for decimal numbers) in java is double.
  when the numbers is followed by a 'f' that means it's a float.

  float have a high degree of precision. doubles have twice the precision of floats.
  1 divided by 3 is 0.(3) (read as zero point 3 recuring)
  java does not have the concept of recuring numbers so it evaluates the math until it runs out of space
  in the current type.
  
  for doubles that's 0.3333333333333333
  for floats that's  0.33333334  (the 4 at the end is due to floating point rounding errors)
